{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Redovisningstexter</h1>
    <p></p>

  
    <h2 id="kmom01">Kmom01</h2>
    <p>Mina förkunskaper i objektorienterad programmering är begränsade, 
        har programmerat enkla grejer i C++ och java bland annat, 
        men har dåliga grundkunskaper i objektorienterade tekniker - även om jag tror mig förstå det väsentliga.

        Mina förväntningar på kursen är förutom ökade programmeringskunskaper att
        <li>få mer hands-on erfarenhet av programmering och dagligt arbete med git och utvecklingsmiljö.</li>
        <li> kunskaper om moderna ramverk och verktyg för webutveckling</li>
        <li>webplatsdesign och verktyg</li>
    
    <h3> PHP's modell för klasser och objekt</h3>
    <p>PHP verkar ha bra stöd för klasser och med det objektorienterad programmering. 
        klasser definieras med 'class' och object instantieras baserat på den klassdefinitionen.
        Klasser kan definiera constructor och destructor när objekten skapas och avlivas, men inget
        man behöver använda.
        Viktigt att variabler kan vara privata, protected eller publika (åtkomliga utanför 
        klassen).
        Namespace kan användas för att separera variabler mellan mellan namespace.
    </p>
    <h3>me/report reflektion</h3>
    <p></p>Kodbas, kod, struktor för uppgiften tycker jag funkade: Det är bra att använda färdiga ramverk
    som symfony för att kunna fokusera på det viktiga och inte den underliggande "infrastruturen",
    även om det är en risk att man fastnar i detaljer i ramverken i sin lokala utvecklingsmiljö.</p>

    <p>Artikeln “PHP The Right Way” verkar vara heltäckande men mycket omfattande - och förmodligen för 
    detaljerad för våra behov i många avseenden, så kommer att fungera som uppslagsverk mer än 
    utbildningsmaterial. Har bara skummat igenom översiktligt då uppgiften var att bekanta sig översiktligt.
    har ingen uppfattning om vilka delar som är mer intressanta än andra.</p>
    <p> Jag valde att använda vanlig CSS tills vidare, 
        kanske går jag äver till LESS eller SASS senare om jag känner behov av mer struktur. </p>
      </p>
<p>
    <h3>TIL</h3>
    <li>Symfony. Har inte använt tidigare och återigen imponerad om omfattande funktioner i standardramverk </li>
    <li>Det ska vara lätt att göra rätt</li>
    <li>Bra med repetition av dagligt arbete med git. De behövs för en icke-programmerare.</li>
</p>

<h2 id="kmom02">Kmom02</h2>
  
{% apply markdown_to_html %}

### Objektorieterad PHP
Kort förklaring av vad objektorienterad PHP bestårt av;
#### "Arv"
En klass kan ärva en annan redan definierad klass genom "extends" i definitionen, t.ex ```class CardGraphic extends Card```. Den nya klassen ärver alla medlemsvariabler och metoder från den gamla klassen plus att man definiera ytterligare. I det här kursmomentet ärver  
"CardGraphic" "Card" och är kompletterad med en ny metod "getAsString" som då ersätter motsvarande metod i klassen "Card".
#### "Komposition"
En komposition innebär att en klass består ev en eller fler andra klasser. I det här kursmomentet är "DeckOfCards" och "CardHand" kompositioner 
av klassen "CardGraphic".
#### "Interfaces" 
Interface är ett sätt att definiera de interface en klass har, Rent praktiskt defineras det med ```interface``` i PHP. Interfacet implementeras sedan i klassen med 
```implements```, t.ex ```class CardGraphic implements CardInterface```. 
#### "Trait"
Trait används i PHP för att åstadkomma arv från flera klasser, så kallat multipelt arv. Trait består likt en klass av metoder och medlemsvariabler.
Trait definieras i php med ```trait``` och kan sedan användas i klasser med "use".
### Implementationén
Jag har implementerat en kortlek med klasserna Card, CardGraphic, DeckOfCards och CardHand. CardGraphic ärver den enklasre Card-klassen och
DeckOfCards och CardHand är kompositioner av CardGraphic.
Jag har implementerat CardController och CardAPIController för att hantera websidor och API.
    Jag ville hitta ett sätt att generera klass-dokumentationen, så jag har använt [phpDocumentor](https://www.phpdoc.org/)
    för att generera dokumentation baserat på phpdoc kommentarer i koden - jag lagrar den i templates/card/docs som markdown. 
    Jag ville generera den i markdown för det känns mest naturligt att inkludera i github README.md men krävde även att jag installerade
    markdown stöd i symfony för att länka in i rapport-sidan.
    För att få tabeller att fungera krävdes även tillägg i services.yaml
    
    ``` 
    League\CommonMark\Extension\Table\TableExtension:
        tags: [ 'twig.markdown.league_extension' ]
    League\CommonMark\Extension\HeadingPermalink\HeadingPermalinkExtension:
        tags: [ 'twig.markdown.league_extension' ]
    League\CommonMark\Extension\HeadingPermalink\HeadingPermalinkRenderer:
        tags: [ 'twig.markdown.league_extension' ]
    League\CommonMark\Normalizer\SlugNormalizer:
        tags: [ 'twig.markdown.league_extension' ]
    ```
### Förbättringspotential
Att skapa markdown med php Documentor blir sådär och jag skrev ett eget enkel templkate för att bara få ut det viktigaste. 
Markdown stödet i symfone med commonmark är begränsat i funktionalitet och svåranvänt och jag ville inte lägga mer tid på att få det snyggt,
så där finns det förbättringspotential - förmodligen genom att generera html som man vill ha den direkt från phpDocumentor.
Jag skulle så klart också kunan använda svg-bilderna för att generera bilderna i CardGraphic istället för text, men det funkar iallafall.
Jag är även nöjd med att jag implementerade CardHand som fyller på med de kort som dras från kortleken.

Själva programmering med klasser var basic och det svåra har legat i layout, phpdoc, markdown samt även förstå sessionshanteringen i symfony.

### Reflektioner på symfony och kod enligt MVC
Jag har inte fattat vad MVC står för - förkortningen känns inte logisk och jag får slå upp på dbwebb vad den står för (och dbwebb är inte sökbar).
När jag letar i andra källor vad MVC är förstår jag att det är ett vanligt arkitekturmönster inim applikationsutveckling: Model, View, Controller. 
Vyer och Controller tycker jag blir tydligt i symfony. Hur modelleringen kommer in i bilden antar jag klarnar senare.

### TIL
* Jag har lärt mig lite om objektoritering i PHP, vilket är bra.
* Jag borde intte spendera så mycket tid på att få markdown att fungera i symfony, det är inte värt det.






{% endapply %}

    <h2 id="kmom03">Kmom03</h2>
    <p>Redovisningstext</p> 
    {% apply markdown_to_html %}

### Flödesschema och pseudokod 
Det gick bra att flödesmodellera och skriva lite pseudokod - det var inget nytt och inet svårt, men något jag i min vardag ägnar för lite tid åt '
så bra lärdom att det faktiskt är väl investerad tid för att hjälpa till med struktur och hjälpa till att hitta okända utmaningar tidigt.
I verkligheten där flera personer är inbölandade i förvalting av kod är det nog också ett stöd för andra att sätta sig in i koden.
### Implementation
Jag hade en ganska god bild av hur jag skulle lösa uppgiften och vilken logik som behövde implementeras - det var den enkla delen. Jag fastnade
en del på hur jag skulle minimera koden i controllern och förenkla så mycket som möjligt med oberoende klasser med väl defiierade gränssnitt.
Lintningen tog också ganska lång tid då jag behövde lära mig mer om hård typning där det är möjligt i php. Jag har inte kodat klasser i php tidigare 
och inte varit någa med att deklarera alla variabler, vilket jag nu behövde göra.
Jag hade lite problem med att en linter i VS code rödmarkerade vissa problem som phpstan tyckte var ok och jag lyckades inte få phpdoc hinters att 
fungera, vilket jag till slut gav upp. 
En utmaningDet handlade om att jag sparade klassobjekt i sessionen och vid inläsning är de inte typade. Jag klurade ut hur jag kan kontrollera om den 
inlästa variabeln är en instans av en klass och på så sätt säkerställa kvalitet (och bli av med lint-felen).
**Jag ägande inte tid åt att fixa till koden från tidigare kursmoment** så där varnar phpstan fortfarande.
Jag är hyfsat nöjd med resultatet - det löser uppgiften men går att förbättra - framförallt snyggare spelkort.
Jag har inte implementerat valfria krav.
### Känsla för symfony
Symfony funkar helt ok för ändamålet och har bra stöd för den designstruktur vi eftersträvar med MVC.
Dock är det en del overhead med ett stort ramverk där det tar tid att sätta sig in i detaljer - som egentligen inte skulle behövas för att
lösa uppgifterna i kursen - men å andra sidan kan vi inte lösa allt från grunden själva så behöver ramverk att stötta oss på.
Det man kan fundera på tycker jag är om man borde separera utvecklingsverktygen från "produktionsplattform". I verligheten skulle det inte vara önskvärt
att ha composer och php-moduler i symfony utan bara de som behövs. Linters och annat som bara behövs under utveckling skulle man vilja hantera helt separat 
från symfony.
### TIL
* Jag har bättre förståelse för klasser och möjligheter till hårdare typning i php.
* Mer kunskap om kodstandard och lintning i php.



{% endapply %}
<h2 id="kmom04">Kmom04</h2>
{% apply markdown_to_html %}
Kursmomentet handlade mycket om att bygga automatiserad enhetstestning med hjälp av PHPUnit. jag tycker det var mycket intressant och lärorikt,
och faktiskt enklare än vad jag trodde att skriva tester som blir hyfsat heltäckande.
Jag lyckades utan större problem få mer än 90% kodtäckning i min Game21 kod och även underliggande Card* klasser. Jag brydde mig inte om att skriva tester
för Dice och Controller klasserna.
Anledningen att det snabbt blev ganska heltäckande var att koden är ganska okomplicerad och den mesta koden körs igenom i och med att jag inte tagit
höjd för alla eventuella specialfall, vilket man borde om det ska användas på riktigt.
phpdoc hade jag redan installerat i tidigare kursmoment där det skulle dokumenteras klasser och jag ville inte göra det manuellt utan nyttja docblocks i koden,
så det blev lite dubbeljobb.

Den mesta tiden i kursmomentet ägnade jag åt att jobba bort lint-varningar från phpstan. Då PHP inte är ett starkt typat språk så känns det lite bakvänt
att behöva lägga in tydligare typning på variabler och returvärden i docblocks för att komma igenom med 0 fel i lintningen. Men jag körde på max-level så 
får skulla mig själv - det var lärorikt. Jag brydde mig inte om att rätta upp Dice och Controller-klasser.
Lintvarningarna gjorde att jag ändrade lite kod och la till checkar för att säkerställa att returnerade värden är avsedda typer - mest att hantera null på rätt sätt.

Jag behövde installera phpstan/phpstan-phpunit för att slippa en del lint varningar på testklasserna.

### TIL
* Finns smidiga ramverk för enhetstestning i PHP
* Skriv bra kod med stark typning och felhantering från start så slipper man extrajobb vid lintning. Kör lintning ofta då du har koden färskt i minnet.
* Enabla en bra realtids-lintning i din IDE.

{% endapply %}

<h2 id="kmom05">Kmom05</h2>

{% apply markdown_to_html %}

Det gick bra att jobba igenom uppgiften med doctrine.  Gick även bra att sätta upp mysql på studentserver och spara lösen i vault. Bra att det tas 
med i kursen att secrets inte ska checkas in i repot. Det skulle vara bra att lägga till i kursmaterialet hur man säkerställer att känsliga filer inte 
kommer med i commits - kan tänka mig några missar det och inte tydligt exakt vilken fil som innehåller privata nyckeln + vad gör man när man av misstag 
checkat in secrets.
  
Kanske kommer i nästa kursmoment, men om inte borde ju sårbarhetsscanning och secrets-scanning vara del i testningen / pipelines. Om inte annat en artikel om hur man 
använder Githubs funktion för att scanna efter och varna för incheckade secrets. 
  
Fick problem med att rätt dotenv variabler inte användes i webben på studentservern, men funkade i CLI på studentservern. Jag dumpade variabeln i twig vyn pch såg att databasserver
127.0.0.1 användes fast jag rensat bort .env.student.local och kollat att ingen fil överhuvudtaget innehåll localhost - ändå användes den i webgränssnittet.
I CLI såg allt rätt ut med bin/console debug:dotenv samt att accessa databasen. 
Jag tror felet låg i nån cache. Jag rensade med bin/console cache:clear och tog även bort allt i var/ på studentservern men det hjälpte inte. 
När jag rensat hela report katalogen och gjort en ny uppladdning funkade det så jag misstänker nån cache i apache webservern.
  
Man behöver nog hålla på en del med abstraktionslagret för doctrine för att lära sig syntaxen - inte självklart men med de exempel som finns var det inga problem
att lägga till de funktioner som behövdes i kursmomentet.
  
I implementationen tänkte jag att jag gör ungefär lika som i eshopen i databas-kursen och återanvände en del kod från de templates som vi använde där.
Implementationen av bilder löste jag på samma sätt med att lagra filnamnet och förutsätta att filen finns på plats. Ingen uppladdningsfunktion av bildfil med andra ord, 
känns som överkurs i denna uppgiften.
Inga problem att använda doctrine genererade funktioner för crud-operationer, smidigt sätt att få heltäckande funktioner för att uppdatera databasen.
  
Fördelen med att använda ORM är ju att man får en inbyggd kontroll med endast automatiskt genererade SQL'er och förmodligen även bättre skydd mot SQL-injections från inmatningsfält.
Att det går att kombinera med egen SQL i lägen då detta är lämpligare är ju smidigt.
  
Jag gjorde optionen att resetta databasen.
  
### TIL
-  Var noga med dina secrets! Checka inte in dem. Om du av misstag gör det så behöver de bytas. Räcker inte att uppdatera eller ändra filen då git history innehåller din secret.
- Lita inte på symfonys rensning av cache. Lita inte på överliggande apache webserver cache.


{% endapply %}
<h2 id="kmom06">Kmom06</h2>
<p><a href="{{ path('metrics') }}">Se Metrics Analys</a></p>

{% endblock %}
